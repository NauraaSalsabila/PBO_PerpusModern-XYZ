/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pboteori;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PBOTeori {
    private static List<AnggotaPerpustakaan> daftarAnggota = new ArrayList<>();
    private static List<Admin> daftarAdmin = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        AnggotaPerpustakaan anggotaLogin = null;
        Admin adminLogin = null;
      

        boolean inginLogin = true;

        while (inginLogin) {
            // Menampilkan menu login atau pendaftaran
            System.out.println("Selamat datang di Perpustakaan XYZ");
            System.out.println("1. Login");
            System.out.println("2. Daftar sebagai Anggota");
            System.out.println("3. Tampilkan buku");
            System.out.println("4. Logout");
            System.out.print("Pilih jenis aksi (1 - 3): ");

            int jenisAksi = scanner.nextInt();

            clearScreen();

            if (jenisAksi == 1) {
                // Login
                System.out.println("1. Login sebagai Anggota");
                System.out.println("2. Login sebagai Admin");
                System.out.print("Pilih jenis login (1/2): ");
                int jenisLogin = scanner.nextInt();

                if (jenisLogin == 1) {
                    // Login sebagai Anggota
                    System.out.print("Masukkan nomor anggota: ");
                    String nomorAnggota = scanner.next();

                    anggotaLogin = null;
                    // Cari anggota dalam daftar anggota
                    for (AnggotaPerpustakaan anggota : daftarAnggota) {
                        if (anggota.getNomorAnggota().equals(nomorAnggota)) {
                            anggotaLogin = anggota;
                            break;
                        }
                    }

                    if (anggotaLogin != null) {
                        System.out.println("Selamat datang, " + anggotaLogin.getNama() + "!");
                        // Setelah login, tampilkan menu pilihan untuk anggota
                        tampilkanMenuAnggota(anggotaLogin, scanner);
                    } else {
                        System.out.println("Nomor anggota tidak ditemukan. Silakan daftar terlebih dahulu");
                    }
                } else if (jenisLogin == 2) {
                    // Login sebagai Admin
                    // Bagian login admin
                    System.out.print("Masukkan username admin: ");
                String usernameAdmin = scanner.next();
                System.out.print("Masukkan password admin: ");
                String passwordAdmin = scanner.next();

                Admin admin = new Admin("prad", "1892"); // Inisialisasi admin

                if (admin.login(usernameAdmin, passwordAdmin)) {
                    System.out.println("Selamat datang, Admin " + usernameAdmin );
                    // Setelah login, tampilkan menu pilihan untuk admin
                    tampilkanMenuAdmin(admin, scanner);
                } else {
                    System.out.println("Username atau password admin salah. Coba lagi.");
                }
            } else if (jenisAksi == 2) {
                // Pendaftaran Anggota
                System.out.print("Masukkan nama: ");
                String namaAnggota = scanner.next();
                System.out.print("Masukkan alamat: ");
                String alamatAnggota = scanner.next();

                // Buat objek AnggotaPerpustakaan dan tambahkan ke dalam daftar anggota perpustakaan
                AnggotaPerpustakaan anggotaBaru = new AnggotaPerpustakaan(namaAnggota, alamatAnggota);
                anggotaBaru.registerAnggota();
                daftarAnggota.add(anggotaBaru);

                // Tanyakan apakah ingin login lagi atau tidak
                boolean pilihanValid = false;
                while (!pilihanValid) {
                    System.out.print("Apakah ingin login lagi? (y/n): ");
                    char jawaban = scanner.next().charAt(0);

                    if (jawaban == 'y' || jawaban == 'Y') {
                        inginLogin = true;
                        pilihanValid = true;
                    } else if (jawaban == 'n' || jawaban == 'N') {
                        inginLogin = false;
                        pilihanValid = true;
                    } else {
                        System.out.println("Pilihan tidak valid.");
                    }
                }
            } else if (jenisAksi == 3) {

        List<Buku> daftarBuku = Buku.buatDaftar11Buku();

                 // Menampilkan informasi setiap buku dalam daftar
                for (Buku buku : daftarBuku) {
                    System.out.println(buku.displayInfo());
                    System.out.println(); // Spasi antar buku
                }
                break;
            } else if (jenisAksi == 4) {
                System.out.println("Terima kasih. Sampai jumpa lagi!");
            }else {
                System.out.println("Pilihan tidak valid.");
            }
        }
    }
   }

    private static void clearScreen() {
        try {
            final String os = System.getProperty("os.name");

            if (os.contains("Windows")) {
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                System.out.print("\033[H\033[2J");
                System.out.flush();
            }
        } catch (final Exception e) {
            System.out.println("Error saat membersihkan layar.");
        }
    }

    // Metode untuk menampilkan menu pilihan untuk anggota setelah login
    private static void tampilkanMenuAnggota(AnggotaPerpustakaan anggota, Scanner scanner) {
        boolean inginLogout = false;

        while (!inginLogout) {
            // Menampilkan menu pilihan untuk anggota
            System.out.println("Menu Anggota:");
            System.out.println("1. Pinjam Buku");
            System.out.println("2. Lihat Riwayat Peminjaman");
            System.out.println("3. Logout");
            System.out.print("Pilih nomor menu (1-3): ");

            int pilihanMenu = scanner.nextInt();

            switch (pilihanMenu) {
                case 1:
                    // Implementasi pinjam buku
                    System.out.print("Masukkan nomor ISBN buku yang ingin dipinjam: ");
                    String nomorISBN = scanner.next();
                    // (Implementasi logika peminjaman buku)
                    break;
                case 2:
                    // Implementasi lihat riwayat peminjaman
                    System.out.println("Riwayat Peminjaman:");
                    System.out.println(anggota.displaySejarahPeminjaman());
                    break;
                case 3:
                    // Logout
                    System.out.println("Logout berhasil.");
                    inginLogout = true;
                    break;
                default:
                    System.out.println("Pilihan tidak valid.");
                    break;
            }
        }
    }

    // Metode untuk menampilkan menu pilihan untuk admin setelah login
    private static void tampilkanMenuAdmin(Admin admin, Scanner scanner) {
        boolean inginLogout = false;
        
        while (!inginLogout) {
            // Menampilkan menu pilihan untuk admin
            System.out.println("Menu Admin:");
            System.out.println("1. Tambah Buku");
            System.out.println("2. Lihat Riwayat Transaksi");
            System.out.println("3. Logout");
            System.out.print("Pilih nomor menu (1-3): ");

            int pilihanMenu = scanner.nextInt();

            switch (pilihanMenu) {
                case 1:
                    
                    // Implementasi tambah buku
                    System.out.print("Masukkan judul buku: ");
                    String judulBuku = scanner.next();
                    System.out.print("Masukkan pengarang buku: ");
                    String pengarangBuku = scanner.next();
                    System.out.print("Masukkan nomor ISBN buku: ");
                    String nomorISBN = scanner.next();

                    // Buat objek Buku baru dan tambahkan ke dalam daftar buku perpustakaan
                    Buku bukuBaru = new Buku(judulBuku, pengarangBuku, nomorISBN);


                    System.out.println("Buku berhasil ditambahkan.");
                    break;
                    
                case 2:
                    // Implementasi lihat riwayat transaksi
                    System.out.println("Riwayat Transaksi:");
                    // (Implementasi logika untuk melihat riwayat transaksi)
                    break;
                case 3:
                    // Logout
                    System.out.println("Logout berhasil.");
                    inginLogout = true;
                    break;
                default:
                    System.out.println("Pilihan tidak valid.");
                    break;
                    
                    
            }
            boolean inginKembali = true;

            while (inginKembali) {
                System.out.print("Apakah ingin kembali ke menu admin? (y/n): ");
                char jawaban = scanner.next().charAt(0);

                if (jawaban == 'y' || jawaban == 'Y') {
                    inginKembali = true;
                } else if (jawaban == 'n' || jawaban == 'N') {
                    inginKembali = false;
                    inginLogout = true; // Jika tidak ingin kembali, keluar dari menu admin
                } else {
                    System.out.println("Pilihan tidak valid. Silakan ulangi.");
                }
            }
        }
    }
}

class AnggotaPerpustakaan {
    private static int counter = 1;

    private int idAnggota;
    private String nama;
    private String nomorAnggota;
    private String alamat;
    private String sejarahPeminjaman;

    public AnggotaPerpustakaan(String nama, String alamat) {
        this.idAnggota = counter++;
        this.nama = nama;
        this.nomorAnggota = "AGT" + String.format("%04d", idAnggota);
        this.alamat = alamat;
        this.sejarahPeminjaman = "";
    }
    
    public void registerAnggota(){
        //implementasi pendaftaran anggota
        System.out.println("Pendaftaran anggota berhasil!");
        System.out.println("Nomor anggota : " + nomorAnggota);
    }

    public String displaySejarahPeminjaman() {
        return sejarahPeminjaman;
    }

    public int getIdAnggota() {
        return idAnggota;
    }

    public String getNama() {
        return nama;
    }

    public String getNomorAnggota() {
        return nomorAnggota;
    }

    public String getAlamat() {
        return alamat;
    }
}

class Notifikasi {
    private static int counter = 1;

    private int idNotifikasi;
    private AnggotaPerpustakaan anggota;
    private String isiNotifikasi;

    public Notifikasi(AnggotaPerpustakaan anggota, String isiNotifikasi) {
        this.idNotifikasi = counter++;
        this.anggota = anggota;
        this.isiNotifikasi = isiNotifikasi;
    }

    public void kirimNotifikasi() {
        // Implementasi pengiriman notifikasi kepada anggota
        // Anda dapat menambahkan logika pengiriman notifikasi di sini
        System.out.println("Notifikasi telah dikirim ke " + anggota.getNama() + " (" + anggota.getNomorAnggota() + ")");
    }

    public String displayNotifikasi() {
        return "ID Notifikasi: " + idNotifikasi + "\nIsi Notifikasi: " + isiNotifikasi;
    }
}

class Buku {
    private static int counter = 1;

    static List<Buku> buatDaftarBuku() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    static List<Buku> buatDaftar11Buku() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private int idBuku;
    private String judul;
    private String pengarang;
    private String nomorISBN;
    private boolean statusKetersediaan;

    public Buku(String judul, String pengarang, String nomorISBN) {
        this.idBuku = counter++;
        this.judul = judul;
        this.pengarang = pengarang;
        this.nomorISBN = nomorISBN;
        this.statusKetersediaan = true;
    }

    Buku(int idBuku, String judul, String pengarang, String nomorISBN) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public boolean cekKetersediaan() {
        return statusKetersediaan;
    }

    public String displayInfo() {
        return "ID Buku: " + idBuku + "\nJudul: " + judul + "\nPengarang: " + pengarang + "\nNomor ISBN: " + nomorISBN;
    }
}

class Admin {
    private int idAdmin;
    private String namaAdmin;
    private String username;
    private String password;

    public Admin(int idAdmin, String namaAdmin, String username, String password) {
        this.idAdmin = idAdmin;
        this.namaAdmin = namaAdmin;
        this.username = username;
        this.password = password;
    }

    public Admin(String username, String password) {
        this.username = username;
        this.password = password;
    }
    
    

    public String getNamaAdmin() {
        return namaAdmin;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }
    
    public boolean login(String username, String password) {
        // Implementasi validasi login admin
        return this.username.equals(username) && this.password.equals(password);
    }
    
    public void tambahBuku(List<Buku> daftarBuku, Buku bukuBaru) {
        daftarBuku.add(bukuBaru);
        System.out.println("Buku berhasil ditambahkan.");
    }
}

